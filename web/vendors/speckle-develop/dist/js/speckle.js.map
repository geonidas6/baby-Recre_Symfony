{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/js/speckle.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;ACAA;;;;;;;;;IASM,O;;AAEL;;;;;;;;AAQA,kBAAY,OAAZ,EAAqB,OAArB,EAA8B;AAAA;;AAC7B;AACA;AACA,OAAK,QAAL,GAAgB,QAAQ,QAAxB;AACA;AACA,UAAQ,QAAR;AACA;AACA,MAAI,CAAE,OAAF,IAAa,EAAG,mBAAmB,OAAtB,CAAjB,EAAiD;AAChD,QAAK,iBAAL;AACA;AACD,OAAK,OAAL,GAAe,OAAf;AACA;AACA,OAAK,cAAL,GAAsB;AACrB,aAAU,EADW,EACP;AACd,YAAS,CAFY,EAET;AACZ,YAAS,EAHY,EAGR;AACb,aAAU,CAJW,EAIR;AACb,aAAU,CALW,EAKP;AACd,eAAY,IANS,EAMH;AAClB,eAAY,IAPS,EAOH;AAClB,YAAS,KARY,EAQL;AAChB,UAAO,EATc,EASV;AACX,WAAQ,CAVa,EAUV;AACX,cAAW,KAXU,EAWH;AAClB,YAAS,GAZY,EAYP;AACd,eAAY,IAbS,CAaJ;AAbI,GAAtB;AAeA;AACA,OAAK,OAAL,GAAe,KAAK,YAAL,CAAkB,OAAlB,EAA2B,KAAK,cAAhC,CAAf;AA5B6B,iBA6B4C,KAAK,OA7BjD;AAAA,MA6BrB,OA7BqB,YA6BrB,OA7BqB;AAAA,MA6BZ,OA7BY,YA6BZ,OA7BY;AAAA,MA6BH,QA7BG,YA6BH,QA7BG;AAAA,MA6BO,QA7BP,YA6BO,QA7BP;AAAA,MA6BiB,UA7BjB,YA6BiB,UA7BjB;AAAA,MA6B6B,UA7B7B,YA6B6B,UA7B7B;AA8B7B;;AACA,MAAK,UAAU,CAAX,IAAkB,UAAU,OAAhC,EAA0C;AACzC,QAAK,iBAAL,CAAuB,SAAvB;AACA;AACD;AACA,MAAK,UAAU,CAAX,IAAkB,UAAU,OAAhC,EAA0C;AACzC,QAAK,iBAAL,CAAuB,SAAvB;AACA;AACD;AACA,MAAI,WAAW,CAAf,EAAkB;AACjB,QAAK,iBAAL,CAAuB,UAAvB;AACA;AACD;AACA,MAAI,WAAW,CAAf,EAAkB;AACjB,QAAK,iBAAL,CAAuB,UAAvB;AACA;AACD;AACA,MAAK,aAAa,CAAd,IAAqB,aAAa,GAAlC,IAA2C,aAAa,UAA5D,EAAyE;AACxE,QAAK,iBAAL,CAAuB,YAAvB;AACA;AACD;AACA,MAAK,aAAa,CAAd,IAAqB,aAAa,GAAlC,IAA2C,aAAa,UAA5D,EAAyE;AACxE,QAAK,iBAAL,CAAuB,YAAvB;AACA;AACD;AACA,OAAK,YAAL,GAAoB;AACnB,iBAAc,KADK;AAEnB,YAAS,OAFU;AAGnB,kBAAe,MAHI;AAInB,aAAU;AAJS,GAApB;AAMA;AACA,OAAK,aAAL,GAAqB,mBAArB;AACA;AACA,OAAK,MAAL;AACA;;AAED;;;;;;;;;;;+BAOa,O,EAAS,c,EAAgB;AACrC;AACA,OAAI,CAAE,OAAF,IAAa,QAAO,OAAP,yCAAO,OAAP,OAAmB,QAApC,EAA8C;AAC7C,WAAO,cAAP;AACA;AACD;AACA,OAAI,gBAAgB,EAApB;AACA;AACA;AACA,QAAK,IAAI,GAAT,IAAgB,cAAhB,EAAgC;AAC/B,QAAM,QAAQ,QAAQ,GAAR,CAAd;AACA;AACA;AACA;AACA,QAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC9B,mBAAc,GAAd,IAAqB,KAArB;AACA,KAFD,MAEO;AACN,mBAAc,GAAd,IAAqB,SAAS,eAAe,GAAf,CAA9B;AACA;AACD;AACD;AACA,UAAO,aAAP;AAEA;;AAED;;;;;;;;;sCAMoB;AACnB,SAAM,IAAI,KAAJ,CACL,iBACA,+EAFK,CAAN;AAIA;;AAED;;;;;;;;;oCAMkB,G,EAAK;AACtB,OAAI,UAAU,EAAd;AACA,OAAI,QAAQ,SAAZ,EAAuB;AACtB,cAAU,wEAAV;AACA,IAFD,MAEO,IAAI,QAAQ,SAAZ,EAAuB;AAC7B,cAAU,2EAAV;AACA,IAFM,MAEA,IAAI,QAAQ,UAAZ,EAAwB;AAC9B,cAAU,mCAAV;AACA,IAFM,MAEA,IAAI,QAAQ,UAAZ,EAAwB;AAC9B,cAAU,mCAAV;AACA,IAFM,MAEA,IAAI,QAAQ,YAAZ,EAA0B;AAChC,cAAU,kEAAV;AACA,IAFM,MAEA,IAAI,QAAQ,YAAZ,EAA0B;AAChC,cAAU,qEAAV;AACA;AACD,SAAM,IAAI,KAAJ,CACL,iBAAe,GAAf,WAA0B,OADrB,CAAN;AAGA;;AAED;;;;;;;;;;;+BAQa,G,EAAK,G,EAAK;AACtB,UAAO,KAAK,KAAL,CAAW,KAAK,MAAL,MAAkB,MAAM,GAAP,GAAc,CAA/B,IAAoC,GAA/C,CAAP;AACA;;AAED;;;;;;;;;iCAMe;AACd,gBAAW,CAAC,WAAW,KAAK,MAAL,GAAc,QAAd,CAAuB,EAAvB,EAA2B,KAA3B,CAAiC,CAAjC,EAAoC,CAApC,CAAZ,EAAoD,KAApD,CAA0D,CAAC,CAA3D,EAA8D,WAA9D,EAAX;AACA;;;8BAEW;AAAA,OACH,YADG,GACuB,IADvB,CACH,YADG;AAAA,OACW,OADX,GACuB,IADvB,CACW,OADX;AAAA,OAEH,OAFG,GAEsF,OAFtF,CAEH,OAFG;AAAA,OAEM,OAFN,GAEsF,OAFtF,CAEM,OAFN;AAAA,OAEe,QAFf,GAEsF,OAFtF,CAEe,QAFf;AAAA,OAEyB,QAFzB,GAEsF,OAFtF,CAEyB,QAFzB;AAAA,OAEmC,UAFnC,GAEsF,OAFtF,CAEmC,UAFnC;AAAA,OAE+C,UAF/C,GAEsF,OAFtF,CAE+C,UAF/C;AAAA,OAE2D,KAF3D,GAEsF,OAFtF,CAE2D,KAF3D;AAAA,OAEkE,OAFlE,GAEsF,OAFtF,CAEkE,OAFlE;AAAA,OAE2E,MAF3E,GAEsF,OAFtF,CAE2E,MAF3E;AAGX;;AACA,OAAM,OAAO,KAAK,YAAL,CAAkB,OAAlB,EAA2B,OAA3B,CAAb;AACA,OAAM,SAAU,OAAO,CAAvB;AACA;AACA,OAAM,cAAc,SAAS,KAAK,YAAL,EAA7B;AACA;AACA,UAAO,OAAO,MAAP,CAAc,YAAd,EAA4B;AAClC,qBAAiB,WADiB;AAElC,eAAW,mBAAkB,OAAO,CAAzB,WAAkC,OAAO,CAAzC,WAAiD,WAAjD,GAAiE,EAF1C;AAGlC,YAAW,IAAX,OAHkC;AAIlC,oBAAc,KAAK,YAAL,CAAkB,IAAI,QAAtB,EAAgC,MAAM,QAAtC,CAAd,YAAoE,MAApE,QAJkC;AAKlC,aAAU,KAAK,YAAL,CAAkB,UAAlB,EAA8B,UAA9B,IAA4C,IALpB;AAMlC,mBAAa,KAAK,YAAL,CAAkB,IAAI,QAAtB,EAAgC,MAAM,QAAtC,CAAb,YAAmE,MAAnE,QANkC;AAOlC,WAAU,IAAV,OAPkC;AAQlC,YAAQ;AAR0B,IAA5B,CAAP;AAUA;;AAED;;;;;;;;4BAKU;AAAA,OACD,OADC,GACoC,IADpC,CACD,OADC;AAAA,OACQ,QADR,GACoC,IADpC,CACQ,QADR;AAAA,OACkB,aADlB,GACoC,IADpC,CACkB,aADlB;AAET;;AACA,OAAM,WAAW,QAAQ,gBAAR,2BAAiD,QAAjD,QAAjB;AACA,OAAI,YAAa,SAAS,MAAT,GAAkB,CAAnC,EAAuC;AACtC,aAAS,OAAT,CAAiB,UAAC,OAAD,EAAU,CAAV,EAAgB;AAChC,aAAQ,WAAR,CAAoB,OAApB;AACA,KAFD;AAGA;AACD;AACA;AACA;AACA,OAAM,SAAS,QAAQ,YAAR,CAAqB,qBAArB,KAA+C,EAA9D;AACA;AACA,OAAI,eAAe,KAAnB;AACA,OAAI,MAAJ,EAAY;AACX;AACA,QAAI,YAAY,OAAO,KAAP,CAAa,GAAb,CAAhB;AACA;AACA;AACA;AACA,cAAU,MAAV,CAAiB,UAAU,OAAV,CAAkB,SAAS,QAAT,EAAlB,CAAjB,EAAyD,CAAzD;AACA;AACA;AACA;AACA;AACA,QAAI,UAAU,MAAV,GAAmB,CAAvB,EAA0B;AACzB,aAAQ,YAAR,CAAqB,qBAArB,EAA4C,UAAU,IAAV,CAAe,GAAf,CAA5C;AACA,KAFD,MAEO;AACN,aAAQ,eAAR,CAAwB,qBAAxB;AACA,oBAAe,IAAf;AACA;AACD;AACD;AACA;AACA,OAAI,YAAJ,EAAkB;AACjB;AACA;AACA;AACA;AACA;AACA,QAAM,cAAc,QAAQ,YAAR,CAAqB,2BAArB,CAApB;AACA,QAAI,WAAJ,EAAiB;AAChB,aAAQ,KAAR,CAAc,QAAd,GAA0B,gBAAgB,MAAjB,GAA2B,IAA3B,GAAkC,WAA3D;AACA,aAAQ,eAAR,CAAwB,2BAAxB;AACA;AACD;AACA,YAAQ,SAAR,CAAkB,MAAlB,CAAyB,aAAzB;AACA;AACA;AACA;AACA;AACA;AACA,QAAM,cAAc,QAAQ,YAAR,CAAqB,2BAArB,CAApB;AACA,QAAI,WAAJ,EAAiB;AAChB,aAAQ,KAAR,CAAc,QAAd,GAA0B,gBAAgB,MAAjB,GAA2B,IAA3B,GAAkC,WAA3D;AACA,aAAQ,eAAR,CAAwB,2BAAxB;AACA;AACD;AACD;;AAED;;;;;;;;;;6BAOW;AACV,QAAK,OAAL;AACA,QAAK,MAAL;AACA;;AAED;;;;;;;;;;2BAOS;AAAA,OACA,OADA,GAC8C,IAD9C,CACA,OADA;AAAA,OACS,QADT,GAC8C,IAD9C,CACS,QADT;AAAA,OACmB,OADnB,GAC8C,IAD9C,CACmB,OADnB;AAAA,OAC4B,aAD5B,GAC8C,IAD9C,CAC4B,aAD5B;AAAA,OAEA,QAFA,GAE6C,OAF7C,CAEA,QAFA;AAAA,OAEU,SAFV,GAE6C,OAF7C,CAEU,SAFV;AAAA,OAEqB,OAFrB,GAE6C,OAF7C,CAEqB,OAFrB;AAAA,OAE8B,UAF9B,GAE6C,OAF7C,CAE8B,UAF9B;;AAAA,+BAGuB,OAAO,gBAAP,CAAwB,OAAxB,CAHvB;AAAA,OAGA,QAHA,yBAGA,QAHA;AAAA,OAGU,QAHV,yBAGU,QAHV;;AAIR,OAAM,aAAa,QAAQ,SAAR,CAAkB,QAAlB,CAA2B,aAA3B,CAAnB;AACA;AACA;AACA;AACA;AACA,OAAM,YAAY,QAAQ,YAAR,CAAqB,qBAArB,KAA+C,EAAjE;AACA,OAAM,YAAY,YAAY,CAAC,SAAD,EAAY,QAAZ,EAAsB,IAAtB,CAA2B,GAA3B,CAAZ,GAA8C,QAAhE;AACA,WAAQ,YAAR,CAAqB,qBAArB,EAA4C,SAA5C;AACA;AACA;AACA,OAAI,CAAE,UAAF,IAAiB,CAAC,2BAAD,EAA8B,OAA9B,CAAsC,QAAtC,MAAoD,CAAC,CAA1E,EAA8E;AAC7E;AACA;AACA;AACA,YAAQ,YAAR,CAAqB,2BAArB,EAAkD,QAAQ,KAAR,CAAc,QAAd,IAA0B,IAA5E;AACA;AACA;AACA,YAAQ,KAAR,CAAc,QAAd,GAAyB,UAAzB;AACA;AACD;AACA;AACA,OAAI,CAAE,UAAF,IAAgB,SAAhB,IAA8B,CAAC,QAAD,EAAW,OAAX,CAAmB,QAAnB,MAAiC,CAAC,CAApE,EAAwE;AACvE,YAAQ,YAAR,CAAqB,2BAArB,EAAkD,QAAQ,KAAR,CAAc,QAAd,IAA0B,IAA5E;AACA,YAAQ,KAAR,CAAc,QAAd,GAAyB,QAAzB;AACA;AACD;AACA,QAAK,IAAI,IAAI,CAAb,EAAgB,KAAK,QAArB,EAA+B,GAA/B,EAAoC;AACnC;AACA,QAAM,UAAU,SAAS,aAAT,CAAuB,OAAvB,CAAhB;AACA;AACA;AACA,YAAQ,YAAR,CAAqB,oBAArB,EAA2C,CAA3C;AACA;AACA;AACA;AACA,YAAQ,YAAR,CAAqB,oBAArB,EAA2C,QAA3C;AACA;AACA,QAAM,SAAS,KAAK,SAAL,EAAf;AACA;AACA,QAAI,UAAU,QAAO,MAAP,yCAAO,MAAP,OAAkB,QAAhC,EAA0C;AACzC,UAAK,IAAI,QAAT,IAAqB,MAArB,EAA6B;AAC5B,cAAQ,KAAR,CAAc,QAAd,IAA0B,OAAO,QAAP,CAA1B;AACA;AACD;AACD;AACA,QAAI,cAAc,QAAO,UAAP,yCAAO,UAAP,OAAsB,QAAxC,EAAkD;AACjD,UAAK,IAAI,YAAT,IAAyB,UAAzB,EAAqC;AACpC,cAAQ,YAAR,CAAqB,YAArB,EAAmC,WAAW,YAAX,CAAnC;AACA;AACD;AACD;AACA,YAAQ,WAAR,CAAoB,OAApB;AACA;AACD;AACA,OAAI,CAAE,UAAN,EAAkB;AACjB,YAAQ,SAAR,CAAkB,GAAlB,CAAsB,aAAtB;AACA;AACD;;;;;;AAIF,QAAQ,QAAR,GAAmB,CAAnB;;kBAEe,O","file":"speckle.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()","/**\r\n * Speckle.js\r\n *\r\n * A JavaScript module that adds responsive, stylized \r\n * speckles to any element; with no dependencies.\r\n *\r\n * @package speckle\r\n * @since   0.0.1\r\n */\r\nclass Speckle {\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @since  0.0.1\r\n\t * @param  {Element}  element  The passed element to speckle.\r\n\t * @param  {obj}      options  The options object.\r\n\t * @return {void} \r\n\t */\r\n\tconstructor(element, options) {\r\n\t\t// keep track of this instance number for use in \r\n\t\t// grouping the speckles, and the `destroy()` method.\r\n\t\tthis.instance = Speckle.instance;\r\n\t\t// augment the instance count on the class, not the instance.\r\n\t\tSpeckle.instance++;\r\n\t\t// throw error if `element` is not a valid HTML element.\r\n\t\tif (! element || ! (element instanceof Element)) {\r\n\t\t\tthis.throwElementError();\r\n\t\t}\r\n\t\tthis.element = element;\r\n\t\t// Set the default options.\r\n\t\tthis.defaultOptions = {\r\n\t\t\tquantity: 56, // quantity of speckles\r\n\t\t\tminSize: 4, // smallest speckle (1+, less than `maxSize`, px)\r\n\t\t\tmaxSize: 56, // largest speckle (1+, greater than `minSize`, px)\r\n\t\t\ttbOffset: 8, // top/bottom offset (0+, %)\r\n\t\t\tlrOffset: 8,  // left/right offset (0+, %)\r\n\t\t\tminOpacity: 12.5, // minimum opacity (1-100)\r\n\t\t\tmaxOpacity: 87.5, // maximum opacity (1-100)\r\n\t\t\tisBokeh: false, // bokeh effect (blur as a factor of distance)\r\n\t\t\tcolor: '', // color (hex, rgb, hsl, keyword). If none, the colors will be randomized.\r\n\t\t\tzIndex: 0, // z-index (bokeh: the starting z-index)\r\n\t\t\tisCropped: false, // apply `overflow: hidden;` to the container\r\n\t\t\ttagName: 'I', // the Tag Name that the speckle should be rendered as\r\n\t\t\tattributes: null // attributes object as `key: value` pairs\r\n\t\t};\r\n\t\t// Parse and set options.\r\n\t\tthis.options = this.parseOptions(options, this.defaultOptions);\r\n\t\tconst { minSize, maxSize, tbOffset, lrOffset, minOpacity, maxOpacity } = this.options;\r\n\t\t// throw error if `minSize` is less than 1, or greater than `maxSize`.\r\n\t\tif ((minSize < 1) || (minSize > maxSize)) {\r\n\t\t\tthis.throwOptionsError('minSize');\r\n\t\t}\r\n\t\t// throw error if `maxSize` is less than 1, or less than `minSize`.\r\n\t\tif ((maxSize < 1) || (maxSize < minSize)) {\r\n\t\t\tthis.throwOptionsError('maxSize');\r\n\t\t}\r\n\t\t// throw error if `tbOffset` is less than 0.\r\n\t\tif (tbOffset < 0) {\r\n\t\t\tthis.throwOptionsError('tbOffset');\r\n\t\t}\r\n\t\t// throw error if `lrOffset` is less than 0.\r\n\t\tif (lrOffset < 0) {\r\n\t\t\tthis.throwOptionsError('lrOffset');\r\n\t\t}\r\n\t\t// throw error if `minOpacity` is less than 0 or greater than 100; or if is greater than `maxOpacity`.\r\n\t\tif ((minOpacity < 0) || (minOpacity > 100) || (minOpacity > maxOpacity)) {\r\n\t\t\tthis.throwOptionsError('minOpacity');\r\n\t\t}\r\n\t\t// throw error if `maxOpacity` is less than 0 or greater than 100; or if is less than `minOpacity`.\r\n\t\tif ((maxOpacity < 0) || (maxOpacity > 100) || (maxOpacity < minOpacity)) {\r\n\t\t\tthis.throwOptionsError('maxOpacity');\r\n\t\t}\r\n\t\t// Set the global styles.\r\n\t\tthis.globalStyles = {\r\n\t\t\tborderRadius: '50%', \r\n\t\t\tdisplay: 'block', \r\n\t\t\tpointerEvents: 'none', \r\n\t\t\tposition: 'absolute', \r\n\t\t};\r\n\t\t// Set the upgraded class.\r\n\t\tthis.upgradedClass = 'speckle--upgraded';\r\n\t\t// Render speckles.\r\n\t\tthis.render();\r\n\t}\r\n\r\n\t/**\r\n\t * Parse the passed options against the defaults.\r\n\t * \r\n\t * @param  {obj}  options         The passed in user options object.\r\n\t * @param  {obj}  defaultOptions  The default options object.\r\n\t * @return {obj}                  The parsed options object.\r\n\t */\r\n\tparseOptions(options, defaultOptions) {\r\n\t\t// if no options are passed, just return the default options.\r\n\t\tif (! options || typeof options !== 'object') {\r\n\t\t\treturn defaultOptions;\r\n\t\t}\r\n\t\t// init empty `parsedOptions` object.\r\n\t\tvar parsedOptions = {};\r\n\t\t// loop default option keys and parse. If the options \r\n\t\t// object has this key, use it; else, use the default option.\r\n\t\tfor (var key in defaultOptions) {\r\n\t\t\tconst value = options[key];\r\n\t\t\t// If the value is a number, set it no matter what.\r\n\t\t\t// This prevents issues where passing `0` is read as \r\n\t\t\t// no option passed, rendering the default instead.\r\n\t\t\tif (typeof value === 'number') {\r\n\t\t\t\tparsedOptions[key] = value;\r\n\t\t\t} else {\r\n\t\t\t\tparsedOptions[key] = value || defaultOptions[key];\r\n\t\t\t}\r\n\t\t}\r\n\t\t// return the parsed options.\r\n\t\treturn parsedOptions;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Throw an element error.\r\n\t * \r\n\t * @since  0.0.1\r\n\t * @return {Error}  The formatted element error.\r\n\t */\r\n\tthrowElementError() {\r\n\t\tthrow new Error(\r\n\t\t\t'Speckle.js\\n' + \r\n\t\t\t'A valid HTML Element must be passed to the constructor as the first argument.'\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Throw an element error.\r\n\t * \r\n\t * @since  0.0.1\r\n\t * @return {Error}  The formatted element error.\r\n\t */\r\n\tthrowOptionsError(key) {\r\n\t\tvar message = '';\r\n\t\tif (key === 'minSize') {\r\n\t\t\tmessage = 'The value must be greater than or equal to 1, and less than `maxSize`.';\r\n\t\t} else if (key === 'maxSize') {\r\n\t\t\tmessage = 'The value must be greater than or equal to 1, and greater than `minSize`.';\r\n\t\t} else if (key === 'tbOffset') {\r\n\t\t\tmessage = 'The value must be greater than 0.';\r\n\t\t} else if (key === 'lrOffset') {\r\n\t\t\tmessage = 'The value must be greater than 0.';\r\n\t\t} else if (key === 'minOpacity') {\r\n\t\t\tmessage = 'The value must be between 1 and 100, and less than `maxOpacity`.';\r\n\t\t} else if (key === 'maxOpacity') {\r\n\t\t\tmessage = 'The value must be between 1 and 100, and greater than `minOpacity`.';\r\n\t\t}\r\n\t\tthrow new Error(\r\n\t\t\t`Speckle.js [${key}]\\n` + message\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Get a random integer between a passed minimum and maximum.\r\n\t * \r\n\t * @since  0.0.1\r\n\t * @param  {int}  min  The minimum for the returned integer.\r\n\t * @param  {int}  max  The maximum for the returned integer.\r\n\t * @return {int}       The randomized integer.\r\n\t */\r\n\tgetRandomInt(min, max) {\r\n\t\treturn Math.floor(Math.random() * ((max - min) + 1) + min);\r\n\t}\r\n\r\n\t/**\r\n\t * Get a random hex color.\r\n\t * \r\n\t * @since  0.0.1\r\n\t * @return {string}  A random hex color.\r\n\t */\r\n\tgetRandomHex() {\r\n\t\treturn `#${('000000' + Math.random().toString(16).slice(2, 8)).slice(-6).toUpperCase()}`;\r\n\t}\r\n\r\n\tgetStyles() {\r\n\t\tconst { globalStyles, options } = this;\r\n\t\tconst { minSize, maxSize, tbOffset, lrOffset, minOpacity, maxOpacity, color, isBokeh, zIndex } = options;\r\n\t\t// size\r\n\t\tconst size = this.getRandomInt(minSize, maxSize);\r\n\t\tconst center = (size / 2);\r\n\t\t// color\r\n\t\tconst renderColor = color || this.getRandomHex();\r\n\t\t// Create the styles object.\r\n\t\treturn Object.assign(globalStyles, {\r\n\t\t\tbackgroundColor: renderColor, \r\n\t\t\tboxShadow: isBokeh ? `0 0 ${(size / 3)}px ${(size / 3)}px ${renderColor}` : '', \r\n\t\t\theight: `${size}px`, \r\n\t\t\tleft: `calc(${this.getRandomInt(0 - lrOffset, 100 + lrOffset)}% - ${center}px)`, \r\n\t\t\topacity: (this.getRandomInt(minOpacity, maxOpacity) * 0.01), \r\n\t\t\ttop: `calc(${this.getRandomInt(0 - tbOffset, 100 + tbOffset)}% - ${center}px)`, \r\n\t\t\twidth: `${size}px`, \r\n\t\t\tzIndex: zIndex, \r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Destroy Speckle.\r\n\t * \r\n\t * @return {void} \r\n\t */\r\n\tdestroy() {\r\n\t\tconst { element, instance, upgradedClass } = this;\r\n\t\t// destroy the speckles related to this instance.\r\n\t\tconst speckles = element.querySelectorAll(`[data-speckle-group=\"${instance}\"]`);\r\n\t\tif (speckles && (speckles.length > 0)) {\r\n\t\t\tspeckles.forEach((speckle, i) => {\r\n\t\t\t\telement.removeChild(speckle);\r\n\t\t\t});\r\n\t\t}\r\n\t\t// remove this instance from the `data-speckle-groups` \r\n\t\t// attribute on the container element. If none are left after\r\n\t\t// removal, remove the attribute alltogether.\r\n\t\tconst groups = element.getAttribute('data-speckle-groups') || '';\r\n\t\t// initialize the `cleanElement` var as false.\r\n\t\tlet cleanElement = false;\r\n\t\tif (groups) {\r\n\t\t\t// split the groups value by `,` and explode into an array.\r\n\t\t\tlet newGroups = groups.split(',');\r\n\t\t\t// Using `splice()`, remove the index of this instance from\r\n\t\t\t// the `newGroups` array. Note: this returns the removed node, \r\n\t\t\t// not the new array.\r\n\t\t\tnewGroups.splice(newGroups.indexOf(instance.toString()), 1);\r\n\t\t\t// if there are any groups left after the removal, \r\n\t\t\t// set the `data-speckle-groups` attribute to the \r\n\t\t\t// new items as CSV. If there are no items left, remove \r\n\t\t\t// the attribute and set `cleanElement` to `true`.\r\n\t\t\tif (newGroups.length > 0) {\r\n\t\t\t\telement.setAttribute('data-speckle-groups', newGroups.join(','));\r\n\t\t\t} else {\r\n\t\t\t\telement.removeAttribute('data-speckle-groups');\r\n\t\t\t\tcleanElement = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// fully clean the container element, but only if no speckle \r\n\t\t// groups are left on the container element by this point.\r\n\t\tif (cleanElement) {\r\n\t\t\t// if the CSS `position` of the container element was modified\r\n\t\t\t// by this class, it will have added a `data-speckle-position-mod` \r\n\t\t\t// attribute set to `true` or the element's explicit CSS `position` \r\n\t\t\t// value if there was one on the element itself prior to the \r\n\t\t\t// first initialization.\r\n\t\t\tconst positionMod = element.getAttribute('data-speckle-position-mod');\r\n\t\t\tif (positionMod) {\r\n\t\t\t\telement.style.position = (positionMod === 'true') ? null : positionMod;\r\n\t\t\t\telement.removeAttribute('data-speckle-position-mod');\r\n\t\t\t}\r\n\t\t\t// remove the upgraded class.\r\n\t\t\telement.classList.remove(upgradedClass);\r\n\t\t\t// Remove the overflow mod. if the CSS `overflow` of the container \r\n\t\t\t// element was modified by this class, it will have added a \r\n\t\t\t// `data-speckle-overflow-mod` attribute set to `true` or the \r\n\t\t\t// element's explicit CSS `overflow` value if there was one \r\n\t\t\t// on the element itself prior to the first initialization.\r\n\t\t\tconst overflowMod = element.getAttribute('data-speckle-overflow-mod');\r\n\t\t\tif (overflowMod) {\r\n\t\t\t\telement.style.overflow = (overflowMod === 'true') ? null : overflowMod;\r\n\t\t\t\telement.removeAttribute('data-speckle-overflow-mod');\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Destroy and rerender the speckles according\r\n\t * to the same options. Simply runs the `destroy()`\r\n\t * method followed by the `render()` method again.\r\n\t * \r\n\t * @return {void} \r\n\t */\r\n\trerender() {\r\n\t\tthis.destroy();\r\n\t\tthis.render();\r\n\t}\r\n\r\n\t/**\r\n\t * Render the speckles.\r\n\t * \r\n\t * @since  0.0.1\r\n\t * @param  {Element}  element  The container element to speckle.\r\n\t * @return {void} \r\n\t */\r\n\trender() {\r\n\t\tconst { element, instance, options, upgradedClass } = this;\r\n\t\tconst { quantity, isCropped, tagName, attributes } = options;\r\n\t\tconst { position, overflow } = window.getComputedStyle(element);\r\n\t\tconst isUpgraded = element.classList.contains(upgradedClass);\r\n\t\t// Set the instance of this class as `data-speckle-group` \r\n\t\t// incase it needs to be accessed by other scripts. Get the value \r\n\t\t// and append rather than overwriting as this value can be a CSV \r\n\t\t// list of speckle groups.\r\n\t\tconst oldGroups = element.getAttribute('data-speckle-groups') || '';\r\n\t\tconst newGroups = oldGroups ? [oldGroups, instance].join(',') : instance;\r\n\t\telement.setAttribute('data-speckle-groups', newGroups);\r\n\t\t// only add relative positioning to the container element if \r\n\t\t// it is not already `relative`, `fixed`, or `absolute`.\r\n\t\tif (! isUpgraded && (['relative, absolute, fixed'].indexOf(position) === -1)) {\r\n\t\t\t// on the container element, save the fact that the CSS `position` has \r\n\t\t\t// been modified as a `data-speckle-position-mod` attribute set to `true` \r\n\t\t\t// or the explicit `position` value if there is one.\r\n\t\t\telement.setAttribute('data-speckle-position-mod', element.style.position || true);\r\n\t\t\t// set the CSS `position`value to `relative` so that the speckles \r\n\t\t\t// (which are positioned absolute) know where to live.\r\n\t\t\telement.style.position = 'relative';\r\n\t\t}\r\n\t\t// Add `overflow: hidden;` to element if `isCropped` is `true`, if\r\n\t\t// overflows are not already hidden on the container element.\r\n\t\tif (! isUpgraded && isCropped && (['hidden'].indexOf(overflow) === -1)) {\r\n\t\t\telement.setAttribute('data-speckle-overflow-mod', element.style.overflow || true);\r\n\t\t\telement.style.overflow = 'hidden';\r\n\t\t}\r\n\t\t// render speckles according to quantity.\r\n\t\tfor (var i = 1; i <= quantity; i++) {\r\n\t\t\t// Create speckle element according to the `tagName` option.\r\n\t\t\tconst speckle = document.createElement(tagName);\r\n\t\t\t// Set the index of this speckle as `data-speckle-index` \r\n\t\t\t// incase it needs to be accessed by other scripts.\r\n\t\t\tspeckle.setAttribute('data-speckle-index', i);\r\n\t\t\t// Set the speckle group as `data-speckle-group` attribute\r\n\t\t\t// incase it needs to be accessed by other scripts, and\r\n\t\t\t// for use in the `destroy()` method.\r\n\t\t\tspeckle.setAttribute('data-speckle-group', instance);\r\n\t\t\t// Get speckle styles.\r\n\t\t\tconst styles = this.getStyles();\r\n\t\t\t// loop over the speckle style object keys and apply the styles.\r\n\t\t\tif (styles && typeof styles === 'object') {\r\n\t\t\t\tfor (var styleKey in styles) {\r\n\t\t\t\t\tspeckle.style[styleKey] = styles[styleKey];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Add the custom attributes to the speckle.\r\n\t\t\tif (attributes && typeof attributes === 'object') {\r\n\t\t\t\tfor (var attributeKey in attributes) {\r\n\t\t\t\t\tspeckle.setAttribute(attributeKey, attributes[attributeKey]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Append the speckle to the container element.\r\n\t\t\telement.appendChild(speckle);\r\n\t\t}\r\n\t\t// add the upgraded class.\r\n\t\tif (! isUpgraded) {\r\n\t\t\telement.classList.add(upgradedClass);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\nSpeckle.instance = 1;\r\n\r\nexport default Speckle;"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}